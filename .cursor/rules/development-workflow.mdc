---
description:
globs:
alwaysApply: false
---
# 开发工作流程和最佳实践

## 本地开发环境设置

### 环境要求
- Go 1.23+ 
- Docker（可选，用于容器化测试）
- Git

### 初始化项目
```bash
# 克隆项目
git clone <项目地址>
cd lark-base-mapping

# 安装依赖
go mod download

# 创建 .env 文件（参考环境变量配置）
cp .env.example .env  # 如果存在示例文件
```

### 配置环境变量
创建 `.env` 文件并配置必要的飞书应用信息：
```
LARK_APP_ID=your_app_id
LARK_APP_SECRET=your_app_secret
LARK_BASE_URL=https://open.feishu.cn
LARK_WEB_URL=your_web_url
```

## 开发流程

### 运行项目
```bash
# 本地开发运行
go run main.go

# 或者使用 air 进行热重载（如果已安装）
air
```

### 代码修改指南
1. **配置修改**: 在 [config.go](mdc:config.go) 中添加新的环境变量或配置选项
2. **中间件开发**: 在 `middlewares/` 目录下添加新的中间件
3. **路由处理**: 在 `router/` 目录下添加新的 API 端点
4. **数据库迁移**: 在 `migrations/` 目录下添加数据库结构变更

### 测试
- 确保所有环境变量正确配置
- 测试飞书 API 集成功能
- 验证 PocketBase 数据库操作
- 进行容器化测试（可选）

## 部署流程

### Docker 本地构建
```bash
# 构建镜像
docker build -t lark-base-mapping .

# 运行容器
docker run -p 8080:8080 lark-base-mapping
```

### 自动化部署
项目配置了 GitHub Actions CI/CD 流水线：

#### 触发条件
- 推送到 `main` 或 `master` 分支: 自动构建并推送 `latest` 标签
- 创建版本标签 (`v*`): 构建并推送对应版本标签  
- Pull Request: 仅构建验证，不推送镜像

#### 镜像标签规则
- `ghcr.io/{owner}/{repo}:latest` - 主分支最新版本
- `ghcr.io/{owner}/{repo}:v1.0.0` - 版本标签
- `ghcr.io/{owner}/{repo}:main-{sha}` - 分支+提交哈希

## 版本发布

### 发布新版本
1. 更新版本相关文档
2. 创建 Git 标签: `git tag v1.0.0`
3. 推送标签: `git push origin v1.0.0`
4. GitHub Actions 自动构建并发布镜像

### 生产部署建议
- 使用发布的 Docker 镜像而非 `latest` 标签
- 配置适当的环境变量
- 考虑使用 Docker Compose 或 Kubernetes 进行编排
- 定期备份 `pb_data` 目录（PocketBase 数据）

## 故障排查

### 常见问题
1. **配置问题**: 检查 `.env` 文件和环境变量设置
2. **飞书 API 错误**: 验证 App ID 和 Secret 是否正确
3. **数据库问题**: 检查 `pb_data` 目录权限和内容
4. **网络问题**: 确认飞书 API 基础 URL 可访问
