---
description: 
globs: 
alwaysApply: false
---
# API 开发指南

## 飞书 API 集成规范

### 配置管理
所有飞书相关配置应通过 [config.go](mdc:config.go) 中的 `LarkApp` 结构体管理：

```go
type LarkApp struct {
    LarkID      string // 飞书应用 ID
    LarkSecret  string // 飞书应用密钥  
    LarkBaseURL string // 飞书 API 基础 URL
    LarkWebURL  string // 飞书 Web URL
}
```

### 中间件设计
飞书认证中间件位于 [middlewares/lark.go](mdc:middlewares/lark.go)，遵循以下原则：
- 统一的认证逻辑处理
- 错误情况的标准化响应
- 配置参数的验证和传递
- 与 PocketBase 框架的集成

### 路由处理器规范
API 路由处理器位于 [router/lark.go](mdc:router/lark.go)，应遵循：

#### 路由注册模式
在 [main.go](mdc:main.go) 中注册路由：
```go
se.Router.GET("/base/{baseID}/{tableID}/{recordID}", router.LarkBaseTable).BindFunc(
    middlewares.LarkAuth(larkConfig),
)
se.Router.GET("/base/{baseID}/{tableID}", router.LarkBaseTable).BindFunc(
    middlewares.LarkAuth(larkConfig),
)
```

#### URL 参数规范
- `{baseID}`: 飞书多维表格的基础表 ID
- `{tableID}`: 表格 ID  
- `{recordID}`: 记录 ID（可选，用于获取特定记录）

#### 响应格式
- 成功响应：返回 JSON 格式的数据
- 错误响应：包含适当的 HTTP 状态码和错误信息
- 统一的错误处理和日志记录

## API 端点设计原则

### RESTful 设计
- 使用标准的 HTTP 方法（GET, POST, PUT, DELETE）
- URL 路径应清晰反映资源层次结构
- 返回适当的 HTTP 状态码

### 参数验证
- 验证必需的路径参数
- 检查查询参数的有效性
- 对无效请求返回明确的错误信息

### 错误处理
- 使用统一的错误响应格式
- 记录详细的错误日志用于调试
- 不向客户端暴露敏感的内部信息

## 飞书多维表格 API 集成

### 基础表格操作
- 获取表格结构信息
- 读取表格数据
- 支持分页和过滤

### 记录操作
- 获取单个记录详情
- 支持字段选择和格式化
- 处理不同数据类型的字段

### 认证和权限
- 使用飞书应用的 App ID 和 App Secret
- 实现 OAuth 2.0 或其他认证机制
- 确保 API 调用的安全性

## 性能优化建议

### 缓存策略
- 对频繁访问的数据进行适当缓存
- 设置合理的缓存过期时间
- 考虑使用 Redis 等外部缓存系统

### 限流和防护
- 实现 API 调用频率限制
- 防止恶意请求和滥用
- 监控 API 使用情况

### 错误重试
- 对临时网络错误实现重试机制
- 使用指数退避算法
- 设置最大重试次数

## 测试和调试

### API 测试
- 使用 Postman 或类似工具测试 API 端点
- 编写单元测试和集成测试
- 验证各种边界条件和错误场景

### 日志记录
- 记录所有 API 请求和响应
- 包含请求 ID 用于跟踪
- 分级日志（DEBUG, INFO, WARN, ERROR）

### 监控指标
- 响应时间统计
- 错误率监控
- API 调用频率分析
